{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dee0e18b",
   "metadata": {},
   "source": [
    "# 크로스벨리데이션 실습\n",
    "\n",
    "#####  이전에는 전체 데이터를 트레이닝 데이터와 테스트 데이터로 나누어 학습을 시켰다.\n",
    "##### 이번에는 하이퍼파라미터 튜닝을 위해 크로스 밸리데이션 기법을 활용해보도록 한다.\n",
    "\n",
    "\n",
    "\n",
    "---\n",
    "\n",
    "#####  8.9 와인데이터로 와인을 분류하는데 사용해본다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29cf1d3d",
   "metadata": {},
   "source": [
    "# Dataset import\n",
    "## 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "393ce3e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn import datasets\n",
    "raw_wine = datasets.load_wine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1fee972a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alcohol',\n",
       " 'malic_acid',\n",
       " 'ash',\n",
       " 'alcalinity_of_ash',\n",
       " 'magnesium',\n",
       " 'total_phenols',\n",
       " 'flavanoids',\n",
       " 'nonflavanoid_phenols',\n",
       " 'proanthocyanins',\n",
       " 'color_intensity',\n",
       " 'hue',\n",
       " 'od280/od315_of_diluted_wines',\n",
       " 'proline']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 데이터 셋 내 피처 살펴보기\n",
    "raw_wine.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40a7a665",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 데이터 셋의 target 값 살펴보기\n",
    "raw_wine.target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53e0dae9",
   "metadata": {},
   "source": [
    "# 피처, 타깃 데이터 지정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e76b530f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = raw_wine.data\n",
    "y = raw_wine.target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d631e3",
   "metadata": {},
   "source": [
    "## 트레이닝, 테스트 데이터 분할"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d674bf94",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_tn, X_te, y_tn, y_te = train_test_split(X, y, random_state = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d080bc7a",
   "metadata": {},
   "source": [
    "## 데이터 표준화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f9edad99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# X 트레이닝 데이터 기준으로 std scaler fitting, Xtn Xte모두.\n",
    "std_scale = StandardScaler()\n",
    "std_scale.fit(X_tn)\n",
    "X_tn_std = std_scale.transform(X_tn)\n",
    "X_te_std = std_scale.transform(X_te)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b601f993",
   "metadata": {},
   "source": [
    "# 그리드 서치\n",
    "\n",
    "그리드 서치 기법을 이용하여 모형을 학습시킨다.\n",
    "\n",
    "사용할 기본 모델은 서포트 벡터 머신.\n",
    "\n",
    "**stratified k-fold cross validation**을 위해 StratifiedKFold 함수를 불러온다. \n",
    "\n",
    "일반적인 k-fold cross validation과 달리 라벨링의 비율을 유지하면서 데이터를 추출한다.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5ab13de7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=0, shuffle=True),\n",
       "             estimator=SVC(random_state=0),\n",
       "             param_grid={'C': [0.5, 1, 10, 100], 'kernel': ('linear', 'rbf')},\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm                              # Tree 모형 import\n",
    "from sklearn.model_selection import StratifiedKFold  # Stratified K-Fold\n",
    "from sklearn.model_selection import GridSearchCV     # Grid Search\n",
    "\n",
    "# 그리드 서치에 적용할 하이퍼파라미터 설정, SVC의 커널은 linear 혹은 rbf, C값은 0.5, 1, 10, 100 으로 설정.\n",
    "param_grid = {'kernel': ('linear', 'rbf'), \n",
    "             'C': [0.5, 1, 10, 100]}\n",
    "\n",
    "# 크로스 밸리데이션 방법을 설정. n_split는 5개의 split으로 나눈다는 뜻, shuffle은 데이터를 섞는 것.\n",
    "kfold = StratifiedKFold(n_splits = 5, shuffle = True, random_state = 0)\n",
    "\n",
    "# 학습시킬 기본 모형 설정\n",
    "svc = svm.SVC(random_state = 0)\n",
    "\n",
    "# 그리드 서치 수행. 학습시킬 모형 svc와 파라미터 param_grid, 크로스 밸리데이션 방법 kfold, 모형 평가 방법은 accuracy로 설정\n",
    "grid_cv = GridSearchCV(svc, param_grid, cv = kfold, scoring = 'accuracy')\n",
    "\n",
    "# 데이터 적합\n",
    "grid_cv.fit(X_tn_std, y_tn)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8149d28a",
   "metadata": {},
   "source": [
    "## 그리드 서치 결과 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a034422b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'mean_fit_time': array([0.00179691, 0.00154095, 0.00174937, 0.00363488, 0.00239701,\n",
       "        0.00130639, 0.00107231, 0.0012773 ]),\n",
       " 'std_fit_time': array([5.09663698e-04, 2.10650250e-04, 3.56568535e-04, 1.42303212e-03,\n",
       "        2.08970202e-03, 1.00535616e-04, 1.30118944e-04, 7.09670192e-05]),\n",
       " 'mean_score_time': array([0.00059462, 0.00068307, 0.00086226, 0.00141182, 0.00049009,\n",
       "        0.00051222, 0.00034757, 0.00051565]),\n",
       " 'std_score_time': array([2.58361356e-04, 2.26125311e-04, 5.27800076e-04, 3.17556636e-04,\n",
       "        1.40691012e-04, 1.96897374e-05, 8.93786703e-06, 2.10972288e-05]),\n",
       " 'param_C': masked_array(data=[0.5, 0.5, 1, 1, 10, 10, 100, 100],\n",
       "              mask=[False, False, False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'param_kernel': masked_array(data=['linear', 'rbf', 'linear', 'rbf', 'linear', 'rbf',\n",
       "                    'linear', 'rbf'],\n",
       "              mask=[False, False, False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'params': [{'C': 0.5, 'kernel': 'linear'},\n",
       "  {'C': 0.5, 'kernel': 'rbf'},\n",
       "  {'C': 1, 'kernel': 'linear'},\n",
       "  {'C': 1, 'kernel': 'rbf'},\n",
       "  {'C': 10, 'kernel': 'linear'},\n",
       "  {'C': 10, 'kernel': 'rbf'},\n",
       "  {'C': 100, 'kernel': 'linear'},\n",
       "  {'C': 100, 'kernel': 'rbf'}],\n",
       " 'split0_test_score': array([1.        , 0.96296296, 1.        , 0.96296296, 1.        ,\n",
       "        0.96296296, 1.        , 0.96296296]),\n",
       " 'split1_test_score': array([0.92592593, 0.96296296, 0.92592593, 0.96296296, 0.92592593,\n",
       "        0.96296296, 0.92592593, 0.96296296]),\n",
       " 'split2_test_score': array([0.96296296, 1.        , 0.96296296, 1.        , 0.96296296,\n",
       "        1.        , 0.96296296, 1.        ]),\n",
       " 'split3_test_score': array([0.92307692, 0.96153846, 0.92307692, 0.96153846, 0.92307692,\n",
       "        0.96153846, 0.92307692, 0.96153846]),\n",
       " 'split4_test_score': array([1.        , 0.96153846, 1.        , 0.96153846, 1.        ,\n",
       "        0.96153846, 1.        , 0.96153846]),\n",
       " 'mean_test_score': array([0.96239316, 0.96980057, 0.96239316, 0.96980057, 0.96239316,\n",
       "        0.96980057, 0.96239316, 0.96980057]),\n",
       " 'std_test_score': array([0.03377721, 0.01511315, 0.03377721, 0.01511315, 0.03377721,\n",
       "        0.01511315, 0.03377721, 0.01511315]),\n",
       " 'rank_test_score': array([5, 1, 5, 1, 5, 1, 5, 1], dtype=int32)}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.cv_results_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87e6c00a",
   "metadata": {},
   "source": [
    "데이터 프레임으로 볼 때는 이렇게 보면 된다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3766d87d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean_fit_time</th>\n",
       "      <td>0.001797</td>\n",
       "      <td>0.001541</td>\n",
       "      <td>0.001749</td>\n",
       "      <td>0.003635</td>\n",
       "      <td>0.002397</td>\n",
       "      <td>0.001306</td>\n",
       "      <td>0.001072</td>\n",
       "      <td>0.001277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std_fit_time</th>\n",
       "      <td>0.00051</td>\n",
       "      <td>0.000211</td>\n",
       "      <td>0.000357</td>\n",
       "      <td>0.001423</td>\n",
       "      <td>0.00209</td>\n",
       "      <td>0.000101</td>\n",
       "      <td>0.00013</td>\n",
       "      <td>0.000071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_score_time</th>\n",
       "      <td>0.000595</td>\n",
       "      <td>0.000683</td>\n",
       "      <td>0.000862</td>\n",
       "      <td>0.001412</td>\n",
       "      <td>0.00049</td>\n",
       "      <td>0.000512</td>\n",
       "      <td>0.000348</td>\n",
       "      <td>0.000516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std_score_time</th>\n",
       "      <td>0.000258</td>\n",
       "      <td>0.000226</td>\n",
       "      <td>0.000528</td>\n",
       "      <td>0.000318</td>\n",
       "      <td>0.000141</td>\n",
       "      <td>0.00002</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>0.000021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>param_C</th>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>param_kernel</th>\n",
       "      <td>linear</td>\n",
       "      <td>rbf</td>\n",
       "      <td>linear</td>\n",
       "      <td>rbf</td>\n",
       "      <td>linear</td>\n",
       "      <td>rbf</td>\n",
       "      <td>linear</td>\n",
       "      <td>rbf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>params</th>\n",
       "      <td>{'C': 0.5, 'kernel': 'linear'}</td>\n",
       "      <td>{'C': 0.5, 'kernel': 'rbf'}</td>\n",
       "      <td>{'C': 1, 'kernel': 'linear'}</td>\n",
       "      <td>{'C': 1, 'kernel': 'rbf'}</td>\n",
       "      <td>{'C': 10, 'kernel': 'linear'}</td>\n",
       "      <td>{'C': 10, 'kernel': 'rbf'}</td>\n",
       "      <td>{'C': 100, 'kernel': 'linear'}</td>\n",
       "      <td>{'C': 100, 'kernel': 'rbf'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split0_test_score</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split1_test_score</th>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.925926</td>\n",
       "      <td>0.962963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split2_test_score</th>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split3_test_score</th>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.961538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>split4_test_score</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.961538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_test_score</th>\n",
       "      <td>0.962393</td>\n",
       "      <td>0.969801</td>\n",
       "      <td>0.962393</td>\n",
       "      <td>0.969801</td>\n",
       "      <td>0.962393</td>\n",
       "      <td>0.969801</td>\n",
       "      <td>0.962393</td>\n",
       "      <td>0.969801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std_test_score</th>\n",
       "      <td>0.033777</td>\n",
       "      <td>0.015113</td>\n",
       "      <td>0.033777</td>\n",
       "      <td>0.015113</td>\n",
       "      <td>0.033777</td>\n",
       "      <td>0.015113</td>\n",
       "      <td>0.033777</td>\n",
       "      <td>0.015113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rank_test_score</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                0  \\\n",
       "mean_fit_time                            0.001797   \n",
       "std_fit_time                              0.00051   \n",
       "mean_score_time                          0.000595   \n",
       "std_score_time                           0.000258   \n",
       "param_C                                       0.5   \n",
       "param_kernel                               linear   \n",
       "params             {'C': 0.5, 'kernel': 'linear'}   \n",
       "split0_test_score                             1.0   \n",
       "split1_test_score                        0.925926   \n",
       "split2_test_score                        0.962963   \n",
       "split3_test_score                        0.923077   \n",
       "split4_test_score                             1.0   \n",
       "mean_test_score                          0.962393   \n",
       "std_test_score                           0.033777   \n",
       "rank_test_score                                 5   \n",
       "\n",
       "                                             1                             2  \\\n",
       "mean_fit_time                         0.001541                      0.001749   \n",
       "std_fit_time                          0.000211                      0.000357   \n",
       "mean_score_time                       0.000683                      0.000862   \n",
       "std_score_time                        0.000226                      0.000528   \n",
       "param_C                                    0.5                             1   \n",
       "param_kernel                               rbf                        linear   \n",
       "params             {'C': 0.5, 'kernel': 'rbf'}  {'C': 1, 'kernel': 'linear'}   \n",
       "split0_test_score                     0.962963                           1.0   \n",
       "split1_test_score                     0.962963                      0.925926   \n",
       "split2_test_score                          1.0                      0.962963   \n",
       "split3_test_score                     0.961538                      0.923077   \n",
       "split4_test_score                     0.961538                           1.0   \n",
       "mean_test_score                       0.969801                      0.962393   \n",
       "std_test_score                        0.015113                      0.033777   \n",
       "rank_test_score                              1                             5   \n",
       "\n",
       "                                           3                              4  \\\n",
       "mean_fit_time                       0.003635                       0.002397   \n",
       "std_fit_time                        0.001423                        0.00209   \n",
       "mean_score_time                     0.001412                        0.00049   \n",
       "std_score_time                      0.000318                       0.000141   \n",
       "param_C                                    1                             10   \n",
       "param_kernel                             rbf                         linear   \n",
       "params             {'C': 1, 'kernel': 'rbf'}  {'C': 10, 'kernel': 'linear'}   \n",
       "split0_test_score                   0.962963                            1.0   \n",
       "split1_test_score                   0.962963                       0.925926   \n",
       "split2_test_score                        1.0                       0.962963   \n",
       "split3_test_score                   0.961538                       0.923077   \n",
       "split4_test_score                   0.961538                            1.0   \n",
       "mean_test_score                     0.969801                       0.962393   \n",
       "std_test_score                      0.015113                       0.033777   \n",
       "rank_test_score                            1                              5   \n",
       "\n",
       "                                            5                               6  \\\n",
       "mean_fit_time                        0.001306                        0.001072   \n",
       "std_fit_time                         0.000101                         0.00013   \n",
       "mean_score_time                      0.000512                        0.000348   \n",
       "std_score_time                        0.00002                        0.000009   \n",
       "param_C                                    10                             100   \n",
       "param_kernel                              rbf                          linear   \n",
       "params             {'C': 10, 'kernel': 'rbf'}  {'C': 100, 'kernel': 'linear'}   \n",
       "split0_test_score                    0.962963                             1.0   \n",
       "split1_test_score                    0.962963                        0.925926   \n",
       "split2_test_score                         1.0                        0.962963   \n",
       "split3_test_score                    0.961538                        0.923077   \n",
       "split4_test_score                    0.961538                             1.0   \n",
       "mean_test_score                      0.969801                        0.962393   \n",
       "std_test_score                       0.015113                        0.033777   \n",
       "rank_test_score                             1                               5   \n",
       "\n",
       "                                             7  \n",
       "mean_fit_time                         0.001277  \n",
       "std_fit_time                          0.000071  \n",
       "mean_score_time                       0.000516  \n",
       "std_score_time                        0.000021  \n",
       "param_C                                    100  \n",
       "param_kernel                               rbf  \n",
       "params             {'C': 100, 'kernel': 'rbf'}  \n",
       "split0_test_score                     0.962963  \n",
       "split1_test_score                     0.962963  \n",
       "split2_test_score                          1.0  \n",
       "split3_test_score                     0.961538  \n",
       "split4_test_score                     0.961538  \n",
       "mean_test_score                       0.969801  \n",
       "std_test_score                        0.015113  \n",
       "rank_test_score                              1  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.transpose(pd.DataFrame(grid_cv.cv_results_))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a8cdcc6",
   "metadata": {},
   "source": [
    "## 베스트 스코어 및 하이퍼 파라미터 확인\n",
    "\n",
    "그리드 서치 결과 중 베스트 스코어와 하이퍼 파라미터를 확인한다. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cf56f366",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9698005698005698"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "addf541b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0.5, 'kernel': 'rbf'}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_cv.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "195af992",
   "metadata": {},
   "source": [
    "정확도 기준으로 가장 좋은 성능 점수는 0.9698이고, 가장 성능이 뛰어난 하이퍼파라미터는 C = 0.5, kernel  = 'rbf' 인 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bedd1bd",
   "metadata": {},
   "source": [
    "# 최종 모형\n",
    "\n",
    "위의 결과를 바탕으로 최종 모형을 만든다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2643a6e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVC(C=0.5, random_state=0)\n"
     ]
    }
   ],
   "source": [
    "clf = grid_cv.best_estimator_\n",
    "print(clf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc661aa4",
   "metadata": {},
   "source": [
    "이렇게 적는 것만으로 간단하게 만들 수 있다. 그리드 서치를 통해 구한 베스트 모형을 최종 모형으로 설정한다. 앞서 확인했던 베스트 파라미터가 적용된 모형이라는 것을 알 수 있다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70879793",
   "metadata": {},
   "source": [
    "# 크로스 벨리데이션 스코어 확인\n",
    "\n",
    "최종 모형을 이용해 크로스 밸리데이션 점수를 확인해본다. \n",
    "\n",
    "cross_validate 함수로 다수의 성능 평가 지표를 한 번에 확인할 수 있다.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "932716e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([0.00282335, 0.00162196, 0.0015161 , 0.00170493, 0.00164318]),\n",
       " 'score_time': array([0.00277495, 0.00400615, 0.00283313, 0.00358701, 0.00294185]),\n",
       " 'test_accuracy': array([0.96296296, 0.96296296, 1.        , 0.96153846, 0.96153846]),\n",
       " 'test_precision_macro': array([0.96969697, 0.96296296, 1.        , 0.97222222, 0.97222222]),\n",
       " 'test_recall_macro': array([0.96296296, 0.96969697, 1.        , 0.95238095, 0.95238095]),\n",
       " 'test_f1_macro': array([0.96451914, 0.96451914, 1.        , 0.95986622, 0.95986622])}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "metrics = ['accuracy', 'precision_macro', 'recall_macro', 'f1_macro']          # 모형 평가 방법\n",
    "cv_scores = cross_validate(clf, X_tn_std, y_tn, cv = kfold, scoring = metrics) # 모형 성능 점수\n",
    "\n",
    "cv_scores"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb1dc8b7",
   "metadata": {},
   "source": [
    "앞은 여러 개의 지표를 동시에 확인하는 데 사용되었다면 이번에는 한 가지 지표를 확인하는 데에 사용된다.\n",
    "\n",
    "accuracy, 정확도라는 기준만 두고 결과를 확인해본다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ba025bf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.96296296 0.96296296 1.         0.96153846 0.96153846]\n",
      "0.9698005698005698\n",
      "0.015113147817521193\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cv_score = cross_val_score(clf, X_tn_std, y_tn, cv = kfold, scoring = 'accuracy')\n",
    "\n",
    "print(cv_score)        # 각 split 별 accuracy\n",
    "print(cv_score.mean()) # accuracy 평균\n",
    "print(cv_score.std())  # accuracy 표준편차"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4526947e",
   "metadata": {},
   "source": [
    "# 예측\n",
    "\n",
    "최종 모형에 테스트 데이터를 넣고 예측한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "419ed59e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "383.984px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
