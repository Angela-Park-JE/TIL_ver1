"""
프로그래밍 강의> 알고리즘 문제 해설> 나머지 한 점
https://programmers.co.kr/learn/courses/18/lessons/1878

문제 설명
  직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 
  점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 
  단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.

제한사항
  v는 세 점의 좌표가 들어있는 2차원 배열입니다.
  v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.
  좌표값은 1 이상 10억 이하의 자연수입니다.
  직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.
"""



# 23.11.16: 그닥 좋은 방법으로 보이지는 않지만 어찌되었든 풀었다.
# 각 좌표를 x들과 y들 리스트에 담은 뒤 정렬하고, 첫번 째 인덱스에 있는 수가 1개면 그것, 아니면 마지막에 있는 수(두번 째 인덱스여도 맞다.)가 들어가도록 했다.

def solution(v):
    # 숫자들을 담은 다음 한 번만 나온 숫자들로 x, y를 이루어야 한다.
    # 한 번만인건 맞으나 어떤게 x인지 y인지를 찾아야 하기 때문에 한 리스트에 넣는건 옳지 않다.
    xs, ys = [], [] 
    for i in v:
        x, y = i[0], i[1]
        xs.append(x)
        ys.append(y)
    xs.sort()
    ys.sort()
    if xs.count(xs[0]) == 1:
        x = xs[0]
    else:
        x = xs[2]
    if ys.count(ys[0]) == 1:
        y = ys[0]
    else:
        y = ys[2]
        
    answer = [x, y]

    return answer



"""다른 해답"""
# Ihwan Shin 2020.9.22 19:16
# 비트연산자를 사용하는데 '^'가 XOR 을 하는 연산자라는 것을 처음 알게 되었다.
def solution(v):
    return([v[0][0] ^ v[1][0] ^ v[2][0], v[0][1] ^ v[1][1] ^ v[2][1]])
